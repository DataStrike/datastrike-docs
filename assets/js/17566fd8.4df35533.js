"use strict";(self.webpackChunkdatastrike_docs=self.webpackChunkdatastrike_docs||[]).push([[3160],{672:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>o});var t=i(5893),n=i(1151);const a={description:"Analysis"},l="Analysis",d={id:"guides/analysis",title:"Analysis",description:"Analysis",source:"@site/docs/guides/analysis.md",sourceDirName:"guides",slug:"/guides/analysis",permalink:"/datastrike-docs/guides/analysis",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"Analysis"},sidebar:"tutorialSidebar",previous:{title:"Tracker",permalink:"/datastrike-docs/guides/tracker"},next:{title:"Scouting",permalink:"/datastrike-docs/guides/scouting"}},r={},o=[{value:"\ud83d\ude80 Description",id:"-description",level:2},{value:"\ud83c\udfed Setup",id:"-setup",level:3},{value:"\ud83e\udd14 How does it work?",id:"-how-does-it-work",level:3},{value:"\ud83d\udcca Visualizations",id:"-visualizations",level:3},{value:"Timeline",id:"timeline",level:4},{value:"Comps",id:"comps",level:4},{value:"Fights",id:"fights",level:4},{value:"Graph",id:"graph",level:4},{value:"Rounds",id:"rounds",level:4}];function h(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"analysis",children:"Analysis"}),"\n",(0,t.jsx)(s.p,{children:"The analysis feature of Datastrike."}),"\n",(0,t.jsx)(s.h2,{id:"-description",children:"\ud83d\ude80 Description"}),"\n",(0,t.jsx)(s.h3,{id:"-setup",children:"\ud83c\udfed Setup"}),"\n",(0,t.jsxs)(s.p,{children:["The analysis feature is dedicated to parse and analyze log files generated by the scrim workshop code : ",(0,t.jsx)(s.code,{children:"DKEEH"})," from ",(0,t.jsx)(s.a,{href:"https://workshop.codes/DKEEH",children:"Scrimtime"}),".\nTo enable this feature, you need to follow these very simple steps:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Use scrim code : ",(0,t.jsx)(s.code,{children:"DKEEH"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Enable workshop inspector"})," and ",(0,t.jsx)(s.code,{children:"Enable workshop inspector log file"})," should be on ",(0,t.jsx)(s.code,{children:"ON"})," in your settings."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Enable log generator"})," should be on ",(0,t.jsx)(s.code,{children:"ON"})," in the lobby settings, in ",(0,t.jsx)(s.code,{children:"Workshop inspector settings"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:['By default, you\'ll find your logs in the "Overwatch" folder (',(0,t.jsx)(s.code,{children:"C:\\Users\\YourName\\Documents\\Overwatch\\Workshop"}),")."]}),"\n",(0,t.jsx)(s.li,{children:"Import the logs file directly in our tool (you can import multiple files at once)."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Once this is done, when you'll play your scrims (and if you play with these settings...), you'll be able to see the logs files and import them in our tool!"}),"\n",(0,t.jsx)(s.h3,{id:"-how-does-it-work",children:"\ud83e\udd14 How does it work?"}),"\n",(0,t.jsxs)(s.p,{children:["When we receive the logs files, we parse and analyze them to retrieve the data we find interesting. The data is processed by a ",(0,t.jsx)(s.a,{href:"https://github.com/DataStrike/datastrike-python-processing",children:"Python program"})," and then persisted in our database. The data is then provided to the user with different visualizations and statistics."]}),"\n",(0,t.jsx)(s.h3,{id:"-visualizations",children:"\ud83d\udcca Visualizations"}),"\n",(0,t.jsx)(s.p,{children:"Different visualizations are available. Here's a list of the main ones:"}),"\n",(0,t.jsx)(s.h4,{id:"timeline",children:"Timeline"}),"\n",(0,t.jsx)(s.p,{children:"The timeline is used to have a quick overview of the game. It shows the different events that happened during the game such as heroes swaps, kills & deaths, ultimates used, etc."}),"\n",(0,t.jsx)(s.h4,{id:"comps",children:"Comps"}),"\n",(0,t.jsx)(s.p,{children:"The comps visualization is used to see the different compositions used by the teams during the game. It shows the heroes played by each team with the times they were played. It also highlight the diff between 2 comps when a swap occurs."}),"\n",(0,t.jsx)(s.h4,{id:"fights",children:"Fights"}),"\n",(0,t.jsx)(s.p,{children:"Fights section is dedicated to show the different fights that happened during the game. Since we can't really define when a fight happens, we had to create our own algorithm to detect them. The algorithm is as follows :"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:"if (kill OR ultimate):\n    startFight()\n    foreach kill OR ultimate:\n        if (time - lastKillTime < 10seconds):\n            addKillToFight()\n        else:\n            endFight()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Once the fights are detected, we display them with the 2 events categories (kills & ultimates)."}),"\n",(0,t.jsx)(s.h4,{id:"graph",children:"Graph"}),"\n",(0,t.jsx)(s.p,{children:"Our graph section is dedicated to show the different stats and compare them with graphics. We provide the list of the players and the list of the stats given by the logs. You can select / unselect any stats or players and compare them with our dynamic graph."}),"\n",(0,t.jsx)(s.h4,{id:"rounds",children:"Rounds"}),"\n",(0,t.jsx)(s.p,{children:'Last but not least: the rounds section. This section is dedicated to show the different rounds that happened during the game. This part is very "raw" since we didn\'t want to deny the user the possibility to see the raw data. We display the different rounds with the different events that happened during the round in classic tables.'})]})}function c(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);